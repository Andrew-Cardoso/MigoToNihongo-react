import {keyframes, styled} from '@stitches/react';
import {createPortal} from 'react-dom';
import {ElementSize} from '../../types/helper.types';

/* 
/* generated by https://loading.io/ */
const rotate = keyframes({
	'0%': {
		transform: 'rotate(0)',
	},
	'100%': {
		transform: 'rotate(360deg)',
	},
});

const DoubleSpinnerContainer = styled('div', {
	width: '12.5rem',
	height: '12.5rem',
	display: 'inline-block',
	overflow: 'hidden',
	background: 'none',
	filter: 'drop-shadow(.125rem .250rem .375rem black)',
	variants: {
		size: {
			xsm: {
				transform: 'scale(.2)',
			},
			sm: {
				transform: 'scale(.5)',
			},
			md: {
				transform: 'scale(.75)',
			},
			lg: {},
		},
	},
});

const DoubleSpinner = styled('div', {
	width: '100%',
	height: '100%',
	position: 'relative',
	transform: 'translateZ(0) scale(1)',
	backfaceVisibility: 'hidden',
	transformOrigin: '0 0',

	'& div': {
		boxSizing: 'border-box',
	},
	'& > div': {
		position: 'absolute',
		width: '9rem',
		height: '9rem',
		top: '1.75rem',
		left: '1.75rem',
		borderRadius: '50%',
		border: '1rem solid #000',
		borderColor: 'var(--background-primary) transparent var(--background-primary) transparent',
		animation: `${rotate} 1s linear infinite`,
	},
	'& > div:nth-child(2)': {
		width: '6.75rem',
		height: '6.75rem',
		top: '2.88rem',
		left: '2.88rem',
		borderColor: 'transparent var(--main-light) transparent var(--main-light)',
		animation: `${rotate} 1s linear infinite reverse`,
	},
	'& > div:nth-child(3)': {
		borderColor: 'transparent',
	},
	'&  > div:nth-child(3) div': {
		position: 'absolute',
		width: '100%',
		height: '100%',
		transform: 'rotate(45deg)',
	},
	'& > div:nth-child(3) div:before': {
		content: '""',
		display: 'block',
		position: 'absolute',
		width: '1rem',
		height: '1rem',
		top: '-1rem',
		left: '3rem',
		background: 'var(--background-primary)',
		borderRadius: '50%',
		boxShadow: '0 8rem 0 0 var(--background-primary)',
	},
	'& > div:nth-child(3) div:after': {
		content: '""',
		display: 'block',
		position: 'absolute',
		width: '1rem',
		height: '1rem',
		top: '-1rem',
		left: '3rem',
		background: 'var(--background-primary)',
		borderRadius: '50%',
		boxShadow: '0 8rem 0 0 var(--background-primary)',
	},
	'& > div:nth-child(4)': {
		borderColor: 'transparent',
		width: '6.75rem',
		height: '6.75rem',
		top: '2.88rem',
		left: '2.88rem',
		animation: `${rotate} 1s linear infinite reverse`,
	},
	'& > div:nth-child(4) div': {
		position: 'absolute',
		width: '100%',
		height: '100%',
		transform: 'rotate(45deg)',
	},
	'& > div:nth-child(4) div:before': {
		content: '""',
		display: 'block',
		position: 'absolute',
		width: '1rem',
		height: '1rem',
		top: '-1rem',
		left: '1.88rem',
		background: 'var(--main-light)',
		borderRadius: '50%',
		boxShadow: '0 5.75rem 0 0 var(--main-light)',
	},
	'& > div:nth-child(4) div:after': {
		content: '""',
		display: 'block',
		position: 'absolute',
		width: '1rem',
		height: '1rem',
		top: '-1rem',
		left: '1.88rem',
		background: 'var(--main-light)',
		borderRadius: '50%',
		boxShadow: '0 5.75rem 0 0 var(--main-light)',
	},
});

const StyledBackdrop = styled('div', {
	position: 'fixed',
	width: '100vw',
	height: '100vh',
	display: 'grid',
	placeItems: 'center',
	top: 0,
	left: 0,
	backdropFilter: 'brightness(.95)',
});

const StyledContainer = styled('div', {
	width: '100%',
	height: '100%',
	display: 'grid',
	placeItems: 'center',
});

const BackdropSpinnerComponent = ({size}: {size?: ElementSize}) => (
	<StyledBackdrop>
		<SpinnerComponent size={size} />
	</StyledBackdrop>
);

const FullSpinnerComponent = ({size}: {size?: ElementSize}) => (
	<StyledContainer>
		<SpinnerComponent size={size}></SpinnerComponent>
	</StyledContainer>
);

const SpinnerComponent = ({size}: {size?: ElementSize}) => (
	<DoubleSpinnerContainer size={size ?? 'md'}>
		<DoubleSpinner>
			<div></div>
			<div></div>
			<div>
				<div></div>
			</div>
			<div>
				<div></div>
			</div>
		</DoubleSpinner>
	</DoubleSpinnerContainer>
);

interface Props {
	forPage?: boolean;
	size?: ElementSize;
	adapt?: boolean;
}
export const Spinner = ({forPage, size, adapt}: Props) =>
	forPage ? (
		createPortal(<BackdropSpinnerComponent size={size} />, document.getElementById('root')!)
	) : adapt ? (
		<FullSpinnerComponent size={size} />
	) : (
		<SpinnerComponent size={size} />
	);
